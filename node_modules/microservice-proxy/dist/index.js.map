{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"servie/dist/node\";\nimport { useRawBody } from \"servie/dist/common\";\nimport { pathToRegexp } from \"path-to-regexp\";\nimport { getURL } from \"servie-url\";\nimport { transport, HttpResponse } from \"popsicle-transport-http\";\nimport { URL } from \"url\";\n\n/**\n * Proxy configuration object.\n */\nexport interface Config {\n  url: string;\n  path?: string;\n  methods?: string[];\n  newPath?: string;\n  end?: boolean;\n  start?: boolean;\n  sensitive?: boolean;\n}\n\n/**\n * Create a simple service to proxy requests.\n */\nexport class Service {\n  url: string;\n  re: RegExp;\n  methods: Set<string>;\n  newPath?: string;\n\n  constructor(config: Config) {\n    const { path, methods, url, newPath, end, start, sensitive } = config;\n\n    this.re = pathToRegexp(path || \"/\", undefined, {\n      strict: true,\n      start,\n      end,\n      sensitive\n    });\n    this.methods = new Set((methods || []).map(x => x.toLowerCase()));\n    this.url = url;\n    this.newPath = newPath;\n  }\n\n  isMethod(method: string) {\n    return this.methods.size === 0 || this.methods.has(method.toLowerCase());\n  }\n\n  isPath(path: string) {\n    return this.re.test(path);\n  }\n\n  matches(url: URL, method: string) {\n    return this.isMethod(method) && this.isPath(url.pathname);\n  }\n\n  getPath(path: string) {\n    if (!this.newPath) return path;\n\n    return path.replace(this.re, this.newPath);\n  }\n\n  getUrl(url: URL) {\n    return `${this.url}${this.getPath(url.pathname)}${url.search}${url.hash}`;\n  }\n}\n\n/**\n * Proxy any number of paths to services.\n */\nexport function proxy(\n  configs: Config[],\n  send: (req: Request, next: () => never) => Promise<Response> = transport()\n) {\n  const services = configs.map(config => new Service(config));\n\n  return async (req: Request, next: () => Promise<Response>) => {\n    const url = getURL(req);\n\n    for (const service of services) {\n      if (service.matches(url, req.method)) {\n        const proxyReq = new Request(service.getUrl(url), {\n          method: req.method,\n          headers: req.headers,\n          signal: req.signal,\n          omitDefaultHeaders: true,\n          body: useRawBody(req),\n          trailer: req.trailer\n        });\n\n        return send(proxyReq, () => {\n          throw new TypeError(\"Unhandled proxy request\");\n        });\n      }\n    }\n\n    return next(); // 404.\n  };\n}\n"]}