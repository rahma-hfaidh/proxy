{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { proxy } from \"./index\";\nimport { Response, Request } from \"servie/dist/node\";\n\ndescribe(\"microservice proxy\", () => {\n  it(\"should create a proxy\", async () => {\n    const send = jest.fn(async (_: Request) => new Response(\"test\"));\n\n    const m = proxy(\n      [\n        {\n          url: \"http://example.com\"\n        }\n      ],\n      send\n    );\n\n    const res = await m(new Request(\"http://localhost\"), jest.fn());\n\n    expect(send).toHaveBeenCalledTimes(1);\n    expect(send.mock.calls[0][0].url).toEqual(\"http://example.com/\");\n    expect(await res.text()).toEqual(\"test\");\n  });\n\n  it(\"should map to a new path\", async () => {\n    const send = jest.fn(async (_: Request) => new Response(\"test\"));\n\n    const m = proxy(\n      [\n        {\n          url: \"http://example.com\",\n          newPath: \"/test\"\n        }\n      ],\n      send\n    );\n\n    const res = await m(new Request(\"http://localhost\"), jest.fn());\n\n    expect(send).toHaveBeenCalledTimes(1);\n    expect(send.mock.calls[0][0].url).toEqual(\"http://example.com/test\");\n    expect(await res.text()).toEqual(\"test\");\n  });\n\n  it(\"should return `next` when route is not matched\", async () => {\n    const send = jest.fn(async (_: Request) => new Response(\"test\"));\n    const next = jest.fn(async () => new Response(\"404\"));\n\n    const m = proxy(\n      [\n        {\n          url: \"http://example.com\",\n          path: \"/foo\"\n        }\n      ],\n      send\n    );\n\n    const res = await m(new Request(\"http://localhost\"), next);\n\n    expect(next).toHaveBeenCalledTimes(1);\n    expect(await res.text()).toEqual(\"404\");\n  });\n\n  it(\"should match specified methods\", async () => {\n    const send = jest.fn(async (_: Request) => new Response(\"test\"));\n    const next = jest.fn(async () => new Response(\"404\"));\n\n    const m = proxy(\n      [\n        {\n          url: \"http://example.com\",\n          methods: [\"GET\"]\n        }\n      ],\n      send\n    );\n\n    const res = await m(new Request(\"http://localhost\"), next);\n\n    expect(next).toHaveBeenCalledTimes(0);\n    expect(send).toHaveBeenCalledTimes(1);\n    expect(await res.text()).toEqual(\"test\");\n\n    const res2 = await m(\n      new Request(\"http://localhost\", { method: \"POST\" }),\n      next\n    );\n\n    expect(next).toHaveBeenCalledTimes(1);\n    expect(send).toHaveBeenCalledTimes(1);\n    expect(await res2.text()).toEqual(\"404\");\n  });\n\n  it(\"should rewrite paths\", async () => {\n    const send = jest.fn(async (req: Request) => new Response(req.url));\n\n    const m = proxy(\n      [\n        {\n          url: \"http://example.com\",\n          path: \"/:id\",\n          newPath: \"/test/$1\"\n        }\n      ],\n      send\n    );\n\n    const res = await m(\n      new Request(\"http://localhost/123?test=true\"),\n      jest.fn()\n    );\n\n    expect(send).toHaveBeenCalledTimes(1);\n    expect(await res.text()).toEqual(\"http://example.com/test/123?test=true\");\n  });\n});\n"]}