"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const node_1 = require("servie/dist/node");
describe("microservice proxy", () => {
    it("should create a proxy", () => __awaiter(this, void 0, void 0, function* () {
        const send = jest.fn((_) => __awaiter(this, void 0, void 0, function* () { return new node_1.Response("test"); }));
        const m = index_1.proxy([
            {
                url: "http://example.com"
            }
        ], send);
        const res = yield m(new node_1.Request("http://localhost"), jest.fn());
        expect(send).toHaveBeenCalledTimes(1);
        expect(send.mock.calls[0][0].url).toEqual("http://example.com/");
        expect(yield res.text()).toEqual("test");
    }));
    it("should map to a new path", () => __awaiter(this, void 0, void 0, function* () {
        const send = jest.fn((_) => __awaiter(this, void 0, void 0, function* () { return new node_1.Response("test"); }));
        const m = index_1.proxy([
            {
                url: "http://example.com",
                newPath: "/test"
            }
        ], send);
        const res = yield m(new node_1.Request("http://localhost"), jest.fn());
        expect(send).toHaveBeenCalledTimes(1);
        expect(send.mock.calls[0][0].url).toEqual("http://example.com/test");
        expect(yield res.text()).toEqual("test");
    }));
    it("should return `next` when route is not matched", () => __awaiter(this, void 0, void 0, function* () {
        const send = jest.fn((_) => __awaiter(this, void 0, void 0, function* () { return new node_1.Response("test"); }));
        const next = jest.fn(() => __awaiter(this, void 0, void 0, function* () { return new node_1.Response("404"); }));
        const m = index_1.proxy([
            {
                url: "http://example.com",
                path: "/foo"
            }
        ], send);
        const res = yield m(new node_1.Request("http://localhost"), next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(yield res.text()).toEqual("404");
    }));
    it("should match specified methods", () => __awaiter(this, void 0, void 0, function* () {
        const send = jest.fn((_) => __awaiter(this, void 0, void 0, function* () { return new node_1.Response("test"); }));
        const next = jest.fn(() => __awaiter(this, void 0, void 0, function* () { return new node_1.Response("404"); }));
        const m = index_1.proxy([
            {
                url: "http://example.com",
                methods: ["GET"]
            }
        ], send);
        const res = yield m(new node_1.Request("http://localhost"), next);
        expect(next).toHaveBeenCalledTimes(0);
        expect(send).toHaveBeenCalledTimes(1);
        expect(yield res.text()).toEqual("test");
        const res2 = yield m(new node_1.Request("http://localhost", { method: "POST" }), next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(send).toHaveBeenCalledTimes(1);
        expect(yield res2.text()).toEqual("404");
    }));
    it("should rewrite paths", () => __awaiter(this, void 0, void 0, function* () {
        const send = jest.fn((req) => __awaiter(this, void 0, void 0, function* () { return new node_1.Response(req.url); }));
        const m = index_1.proxy([
            {
                url: "http://example.com",
                path: "/:id",
                newPath: "/test/$1"
            }
        ], send);
        const res = yield m(new node_1.Request("http://localhost/123?test=true"), jest.fn());
        expect(send).toHaveBeenCalledTimes(1);
        expect(yield res.text()).toEqual("http://example.com/test/123?test=true");
    }));
});
//# sourceMappingURL=index.spec.js.map