"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("http");
const escapeHtml = require("escape-html");
const Negotiator = require("negotiator");
const servie_send_1 = require("servie-send");
const DOUBLE_SPACE_REGEXP = /\x20{2}/g;
/**
 * Render errors into a response object.
 */
function errorhandler(req, options = {}) {
    const env = process.env.NODE_ENV || "development";
    const production = options.production === true || env === "production";
    const log = options.log || (env === "test" ? Function.prototype : console.error);
    return function errorhandler(err) {
        const output = toOutput(err, production);
        log(err);
        return render(req, output);
    };
}
exports.errorhandler = errorhandler;
/**
 * Convert an error into an "output" object.
 */
function toOutput(err, production) {
    const error = err == null
        ? { message: `Empty error: ${err}` }
        : typeof err === "object"
            ? err
            : { message: String(err) };
    const output = error.output || {};
    const status = Number(output.statusCode || error.statusCode || error.status) || 500;
    const headers = output.headers || error.headers || {};
    const payload = output.payload || {
        status,
        error: http_1.STATUS_CODES[status] || "Error",
        message: (production ? undefined : error.message) || "Error"
    };
    return { status, headers, payload };
}
/**
 * Render HTTP response.
 */
function render(req, output) {
    const negotiator = new Negotiator({
        headers: {
            accept: req.headers.get("accept") || undefined
        }
    });
    const type = negotiator.mediaType(["text/html", "application/json"]);
    if (type === "text/html")
        return renderHtml(req, output);
    return renderJson(req, output);
}
/**
 * Render HTML response.
 */
function renderHtml(req, output) {
    const content = escapeHtml(JSON.stringify(output.payload, null, 2));
    return servie_send_1.sendHtml(req, `
<!doctype html>
<html lang="en">
<head><meta charset="utf-8"><title>Error</title></head>
<body>
<pre>${content.replace(DOUBLE_SPACE_REGEXP, " &nbsp;")}</pre>
</body>
</html>
  `.trim(), {
        status: output.status,
        headers: Object.assign({ "X-Content-Type-Options": "nosniff", "Content-Security-Policy": "default-src 'self'" }, output.headers)
    });
}
/**
 * Send JSON response.
 */
function renderJson(req, output) {
    return servie_send_1.sendJson(req, output.payload, {
        status: output.status,
        headers: Object.assign({ "X-Content-Type-Options": "nosniff" }, output.headers)
    });
}
//# sourceMappingURL=index.js.map