{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request } from \"servie/dist/node\";\nimport * as boom from \"boom\";\nimport * as httpErrors from \"http-errors\";\nimport { errorhandler } from \"./index\";\n\ndescribe(\"errorhandler\", () => {\n  describe(\"default accepts\", () => {\n    const req = new Request(\"/\");\n    const handler = errorhandler(req);\n\n    it(\"should fail gracefully with non-error\", () => {\n      const res = handler(\"test\");\n\n      expect(res).toMatchSnapshot();\n    });\n\n    it(\"should fail gracefully with empty error\", () => {\n      const res = handler(undefined);\n\n      expect(res).toMatchSnapshot();\n    });\n\n    it(\"should render an error\", () => {\n      const res = handler(new Error(\"boom!\"));\n\n      expect(res).toMatchSnapshot();\n    });\n\n    it(\"should render boom status errors\", () => {\n      const res = handler(boom.badRequest(\"data has an issue\"));\n\n      expect(res).toMatchSnapshot();\n    });\n\n    it(\"should render http errors status error\", () => {\n      const res = handler(new httpErrors.BadRequest(\"data has an issue\"));\n\n      expect(res).toMatchSnapshot();\n    });\n  });\n\n  describe(\"accept html\", () => {\n    const req = new Request(\"/\", { headers: { accept: \"text/html\" } });\n    const handler = errorhandler(req);\n\n    it(\"should fail and return html\", () => {\n      const res = handler(new Error(\"boom!\"));\n\n      expect(res.headers.get(\"content-type\")).toEqual(\"text/html\");\n      expect(res).toMatchSnapshot();\n    });\n  });\n\n  describe(\"accept json\", () => {\n    const req = new Request(\"/\", { headers: { accept: \"application/json\" } });\n    const handler = errorhandler(req);\n\n    it(\"should fail and return json\", () => {\n      const res = handler(new Error(\"boom!\"));\n\n      expect(res.headers.get(\"content-type\")).toEqual(\"application/json\");\n      expect(res).toMatchSnapshot();\n    });\n  });\n\n  describe(\"accept as array\", () => {\n    const req = new Request(\"/\", { headers: { accept: [\"text/html\"] } });\n    const handler = errorhandler(req);\n\n    it(\"should fail and return html\", () => {\n      const res = handler(new Error(\"boom!\"));\n\n      expect(res).toMatchSnapshot();\n    });\n  });\n});\n"]}