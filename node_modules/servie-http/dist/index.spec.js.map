{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":";;AAAA,2CAA4C;AAC5C,+CAAmC;AACnC,yCAAoC;AACpC,2BAAsC;AACtC,6BAA6B;AAC7B,+BAA4B;AAC5B,mCAAwC;AAExC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,MAAM,OAAO,GAAG,qBAAa,CAC3B,mBAAO,CAAC;QACN,kBAAG,CAAC,GAAG,EAAE,GAAG,EAAE;YACZ,OAAO,IAAI,eAAQ,CAAC,aAAa,CAAC,CAAC;QACrC,CAAC,CAAC;QACF,kBAAG,CAAC,SAAS,EAAE,GAAG,EAAE;YAClB,OAAO,IAAI,eAAQ,CAAC,qBAAgB,CAAC,WAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,EAAE;gBACjE,OAAO,EAAE;oBACP,OAAO,EAAE,eAAe;iBACzB;gBACD,OAAO,EAAE;oBACP,eAAe,EAAE,SAAS;iBAC3B;aACF,CAAC,CAAC;QACL,CAAC,CAAC;KACH,CAAC,CACH,CAAC;IAEF,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACpD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;IACjC,MAAM,GAAG,GACP,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAoB,OAAQ,CAAC,IAAI,EAAE,CAAC;IAE9E,QAAQ,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;IAE/B,EAAE,CAAC,uBAAuB,EAAE,IAAI,CAAC,EAAE;QACjC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YACzB,IAAI,IAAI,GAAG,EAAE,CAAC;YAEd,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEpE,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBACjB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;gBAC1D,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAEjC,OAAO,IAAI,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,IAAI,CAAC,EAAE;QAChC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,SAAS,EAAE,GAAG,CAAC,EAAE;YACrC,GAAG,CAAC,MAAM,EAAE,CAAC;YAEb,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBACjB,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC,CAAC;gBAE7D,OAAO,IAAI,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Response } from \"servie/dist/node\";\nimport { get } from \"servie-route\";\nimport { compose } from \"throwback\";\nimport { createReadStream } from \"fs\";\nimport * as http from \"http\";\nimport { join } from \"path\";\nimport { createHandler } from \"./index\";\n\ndescribe(\"servie-http\", () => {\n  const handler = createHandler(\n    compose([\n      get(\"/\", () => {\n        return new Response(\"hello world\");\n      }),\n      get(\"/stream\", () => {\n        return new Response(createReadStream(join(__dirname, \"index.ts\")), {\n          headers: {\n            Trailer: \"Server-Timing\"\n          },\n          trailer: {\n            \"Server-Timing\": \"end=100\"\n          }\n        });\n      })\n    ])\n  );\n\n  const server = http.createServer(handler).listen(0);\n  const address = server.address();\n  const url =\n    typeof address === \"string\" ? address : `http://localhost:${address!.port}`;\n\n  afterAll(() => server.close());\n\n  it(\"should work over http\", done => {\n    return http.get(url, res => {\n      let data = \"\";\n\n      res.on(\"data\", (chunk: Buffer) => (data += chunk.toString(\"utf8\")));\n\n      res.on(\"end\", () => {\n        expect(res.headers[\"content-type\"]).toEqual(\"text/plain\");\n        expect(res.headers[\"content-length\"]).toEqual(\"11\");\n        expect(data).toBe(\"hello world\");\n\n        return done();\n      });\n    });\n  });\n\n  it(\"should send trailers\", done => {\n    return http.get(`${url}/stream`, res => {\n      res.resume();\n\n      res.on(\"end\", () => {\n        expect(res.trailers).toEqual({ \"server-timing\": \"end=100\" });\n\n        return done();\n      });\n    });\n  });\n});\n"]}