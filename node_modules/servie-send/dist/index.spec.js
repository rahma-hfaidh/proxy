"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const node_1 = require("servie/dist/node");
const stream_1 = require("stream");
describe("servie-send", () => {
    it("should send text", () => __awaiter(this, void 0, void 0, function* () {
        const req = new node_1.Request("/");
        const res = index_1.sendText(req, "hello world");
        expect(res.status).toEqual(200);
        expect(res.headers).toMatchSnapshot();
        expect(yield res.text()).toEqual("hello world");
    }));
    it("should send an empty response", () => __awaiter(this, void 0, void 0, function* () {
        const req = new node_1.Request("/");
        const res = index_1.sendEmpty(req);
        expect(res.status).toEqual(200);
        expect(res.headers).toMatchSnapshot();
        expect(yield res.text()).toEqual("");
    }));
    it("should send json", () => __awaiter(this, void 0, void 0, function* () {
        const req = new node_1.Request("/");
        const res = index_1.sendJson(req, { hello: "world" });
        expect(res.status).toEqual(200);
        expect(res.headers).toMatchSnapshot();
        expect(yield res.text()).toEqual('{"hello":"world"}');
    }));
    it("should send stream", () => __awaiter(this, void 0, void 0, function* () {
        const req = new node_1.Request("/");
        let chunk = "hello world";
        const stream = new stream_1.Readable({
            read() {
                this.push(chunk);
                chunk = null;
            }
        });
        const res = index_1.sendStream(req, stream);
        expect(res.status).toEqual(200);
        expect(res.headers).toMatchSnapshot();
        expect(yield res.text()).toEqual("hello world");
    }));
    it("should always send 200 when not computing etag", () => __awaiter(this, void 0, void 0, function* () {
        const req = new node_1.Request("/", {
            headers: {
                "If-None-Match": index_1.entityTag("")
            },
            body: ""
        });
        const res = index_1.sendText(req, "");
        expect(res.status).toEqual(200);
        expect(res.headers).toMatchSnapshot();
        expect(yield res.text()).toEqual("");
    }));
    it("should send 304 with matching etag", () => __awaiter(this, void 0, void 0, function* () {
        const req = new node_1.Request("/", {
            headers: {
                "If-None-Match": index_1.entityTag("")
            },
            body: ""
        });
        const res = index_1.sendText(req, "", { etag: true });
        expect(res.status).toEqual(304);
        expect(res.headers).toMatchSnapshot();
        expect(yield res.text()).toEqual("");
    }));
    it("should send 200 with changed etag", () => __awaiter(this, void 0, void 0, function* () {
        const req = new node_1.Request("/", {
            headers: {
                "If-None-Match": index_1.entityTag("content")
            },
            body: ""
        });
        const res = index_1.sendText(req, "", { etag: true });
        expect(res.status).toEqual(200);
        expect(res.headers).toMatchSnapshot();
        expect(yield res.text()).toEqual("");
    }));
});
//# sourceMappingURL=index.spec.js.map