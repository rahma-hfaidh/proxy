{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { sendEmpty, sendJson, sendText, sendStream, entityTag } from \"./index\";\nimport { Request, Headers } from \"servie/dist/node\";\nimport { Readable } from \"stream\";\n\ndescribe(\"servie-send\", () => {\n  it(\"should send text\", async () => {\n    const req = new Request(\"/\");\n    const res = sendText(req, \"hello world\");\n\n    expect(res.status).toEqual(200);\n    expect(res.headers).toMatchSnapshot();\n    expect(await res.text()).toEqual(\"hello world\");\n  });\n\n  it(\"should send an empty response\", async () => {\n    const req = new Request(\"/\");\n    const res = sendEmpty(req);\n\n    expect(res.status).toEqual(200);\n    expect(res.headers).toMatchSnapshot();\n    expect(await res.text()).toEqual(\"\");\n  });\n\n  it(\"should send json\", async () => {\n    const req = new Request(\"/\");\n    const res = sendJson(req, { hello: \"world\" });\n\n    expect(res.status).toEqual(200);\n    expect(res.headers).toMatchSnapshot();\n    expect(await res.text()).toEqual('{\"hello\":\"world\"}');\n  });\n\n  it(\"should send stream\", async () => {\n    const req = new Request(\"/\");\n    let chunk: string | null = \"hello world\";\n\n    const stream = new Readable({\n      read() {\n        this.push(chunk);\n        chunk = null;\n      }\n    });\n\n    const res = sendStream(req, stream);\n\n    expect(res.status).toEqual(200);\n    expect(res.headers).toMatchSnapshot();\n    expect(await res.text()).toEqual(\"hello world\");\n  });\n\n  it(\"should always send 200 when not computing etag\", async () => {\n    const req = new Request(\"/\", {\n      headers: {\n        \"If-None-Match\": entityTag(\"\")\n      },\n      body: \"\"\n    });\n\n    const res = sendText(req, \"\");\n\n    expect(res.status).toEqual(200);\n    expect(res.headers).toMatchSnapshot();\n    expect(await res.text()).toEqual(\"\");\n  });\n\n  it(\"should send 304 with matching etag\", async () => {\n    const req = new Request(\"/\", {\n      headers: {\n        \"If-None-Match\": entityTag(\"\")\n      },\n      body: \"\"\n    });\n\n    const res = sendText(req, \"\", { etag: true });\n\n    expect(res.status).toEqual(304);\n    expect(res.headers).toMatchSnapshot();\n    expect(await res.text()).toEqual(\"\");\n  });\n\n  it(\"should send 200 with changed etag\", async () => {\n    const req = new Request(\"/\", {\n      headers: {\n        \"If-None-Match\": entityTag(\"content\")\n      },\n      body: \"\"\n    });\n\n    const res = sendText(req, \"\", { etag: true });\n\n    expect(res.status).toEqual(200);\n    expect(res.headers).toMatchSnapshot();\n    expect(await res.text()).toEqual(\"\");\n  });\n});\n"]}