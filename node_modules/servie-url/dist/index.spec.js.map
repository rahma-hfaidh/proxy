{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../src/index.spec.ts"],"names":[],"mappings":";;AAAA,mCAAiC;AACjC,mCAAiC;AAEjC,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,GAAG,GAAG,IAAI,gBAAO,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,GAAG,GAAG,cAAM,CAAC,GAAG,CAAC,CAAC;QAExB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,GAAG,GAAG,IAAI,gBAAO,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,GAAG,GAAG,cAAM,CAAC,GAAG,CAAC,CAAC;QAExB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAEtC,MAAM,IAAI,GAAG,cAAM,CAAC,GAAG,CAAC,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,GAAG,GAAG,IAAI,gBAAO,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,GAAG,GAAG,cAAM,CAAC,GAAG,CAAC,CAAC;QAExB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAEtC,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,iCAAiC;QAEnD,MAAM,IAAI,GAAG,cAAM,CAAC,GAAG,CAAC,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACvC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,GAAG,GAAG,IAAI,gBAAO,CAAC,0BAA0B,CAAC,CAAC;QACpD,MAAM,GAAG,GAAG,cAAM,CAAC,GAAG,CAAC,CAAC;QAExB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Request } from \"servie\";\nimport { getURL } from \"./index\";\n\ndescribe(\"servie url\", () => {\n  it(\"should parse url from request\", () => {\n    const req = new Request(\"/test\");\n    const URL = getURL(req);\n\n    expect(URL.host).toEqual(\"localhost\");\n    expect(URL.pathname).toEqual(\"/test\");\n  });\n\n  it(\"should reuse cache when request already parsed\", () => {\n    const req = new Request(\"/test\");\n    const URL = getURL(req);\n\n    expect(URL.host).toEqual(\"localhost\");\n    expect(URL.pathname).toEqual(\"/test\");\n\n    const URL2 = getURL(req);\n\n    expect(URL2).toBe(URL);\n  });\n\n  it(\"should invalidate cache\", () => {\n    const req = new Request(\"/test\");\n    const URL = getURL(req);\n\n    expect(URL.host).toEqual(\"localhost\");\n    expect(URL.pathname).toEqual(\"/test\");\n\n    req.url = \"/foo\"; // Change `url` from under cache.\n\n    const URL2 = getURL(req);\n\n    expect(URL2).not.toBe(URL);\n    expect(URL2.host).toEqual(\"localhost\");\n    expect(URL2.pathname).toEqual(\"/foo\");\n  });\n\n  it(\"should support full urls\", () => {\n    const req = new Request(\"https://example.com/test\");\n    const URL = getURL(req);\n\n    expect(URL.host).toEqual(\"example.com\");\n    expect(URL.pathname).toEqual(\"/test\");\n  });\n});\n"]}